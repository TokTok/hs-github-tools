#!/usr/bin/env python3
import os
import subprocess
import sys
from typing import List

import requests

bzl_data = {}


def glob(*args, **kwargs):
    pass


def load(*args):
    pass


def project(**kwargs):
    pass


def hazel_library(pkg):
    return pkg


def haskell_library(version: str, **kwargs):
    bzl_data["version"] = version


def hspec_test(**kwargs):
    pass


def github_repo():
    repo = os.environ.get("GITHUB_REPOSITORY")
    if repo:
        return repo
    return (subprocess.run(
        ["git", "remote", "get-url", "upstream"],
        check=True,
        capture_output=True).stdout.decode("utf-8").strip().split(":")[1])


def release_github():
    resp = requests.get(
        f"{os.environ['GITHUB_API_URL']}/repos/{github_repo()}/releases",
        auth=(os.environ["GH_USER"], os.environ["GH_TOKEN"]),
    )
    release = resp.json()[0]
    if not release["draft"]:
        print("Could not find the latest draft release.")
        print(f"Latest release found was {release['name']}")
        sys.exit(1)
    return release["name"][1:]


def release_bazel(path: str):
    with open(os.path.join(path, "BUILD.bazel"), "r") as fh:
        exec(fh.read())
    return bzl_data["version"]


def main(prog: str, args: List[str]):
    if len(args) != 1:
        print(f"Usage: {prog}")
        sys.exit(1)

    path = args[0]

    gh_release = release_github()
    bzl_release = release_bazel(path)

    if gh_release == bzl_release:
        print(f"PASS: Upcoming release version is {gh_release}")
    else:
        print(f"FAIL: GitHub draft release {gh_release} does not match "
              f"BUILD.bazel {bzl_release}")
        sys.exit(1)


if __name__ == "__main__":
    main(sys.argv[0], sys.argv[1:])
